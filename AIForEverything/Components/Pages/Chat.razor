@page "/chat"
@using AIForEverything.Components.Layout
@using AIForEverything.Services
@using Microsoft.JSInterop
@using Microsoft.SemanticKernel.ChatCompletion
@using Markdig
@using AIForEverything.Constants
@inject IAIChatService ChatService
@inject IChatHistoryService ChatHistoryService
@inject ILogger<Chat> Logger
@inject IJSRuntime JS
@inject IAuthStateService AuthStateService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@rendermode InteractiveServer

<AuthLayout>
    <div class="chat-container">
        <header class="chat-header">
            <div class="header-content">
                <h1>AI Assistant</h1>
                <p class="subtitle">@ChatConstants.SystemPrompt</p>
            </div>
            <div class="user-profile">
                <div class="user-info">
                    <span class="user-avatar">@(username?[0].ToString().ToUpper())</span>
                    <span class="username">@username</span>
                </div>
                <button class="logout-button" @onclick="HandleLogout" title="Logout">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17 7L15.59 8.41L18.17 11H8V13H18.17L15.59 15.58L17 17L22 12L17 7Z" fill="currentColor"/>
                        <path d="M4 5H12V3H4C2.9 3 2 3.9 2 5V19C2 20.1 2.9 21 4 21H12V19H4V5Z" fill="currentColor"/>
                    </svg>
                </button>
            </div>
        </header>
        
        <div class="chat-history" @ref="chatHistoryDiv">
            @if (chatHistory != null)
            {
                @foreach (var message in chatHistory)
                {
                    <div class="message @(message.Role.ToString().ToLower())">
                        @if (message.Role == AuthorRole.Assistant)
                        {
                            <div class="avatar">AI</div>
                        }
                        <div class="message-content">
                            <p>@((MarkupString)ConvertToHtml(message.Content))</p>
                        </div>
                        @if (message.Role == AuthorRole.User)
                        {
                            <div class="avatar">User</div>
                        }
                    </div>
                }
            }
            @if (isStreaming)
            {
                <div class="message assistant">
                    <div class="avatar">AI</div>
                    <div class="message-content">
                        <p>@((MarkupString)ConvertToHtml(currentStreamingMessage))</p>
                    </div>
                </div>
            }
        </div>

        <div class="chat-input-container">
            <div class="input-wrapper">
                <input type="text" 
                       placeholder="Message AI Assistant..." 
                       @bind="userInput" 
                       @onkeyup="HandleKeyPress" />
                <button type="button" class="send-button" @onclick="SendMessage">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
                @if (showToast)
                {
                    <div class="toast @(isError ? "error" : "info") @(showToast ? "show" : "")">
                        <div class="toast-content">
                            <span class="toast-icon">
                                @if (isError)
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
                                        <path d="M12 8V12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                        <circle cx="12" cy="16" r="1" fill="currentColor"/>
                                    </svg>
                                }
                                else
                                {
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
                                        <path d="M12 16V16.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                        <path d="M12 8V12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                    </svg>
                                }
                            </span>
                            <span class="toast-message">@toastMessage</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</AuthLayout>

@code {
    private string userInput = "";
    private string currentStreamingMessage = "";
    private bool isStreaming = false;
    private ElementReference chatHistoryDiv;
    private CancellationTokenSource? cts;
    private int? userId;
    private string? username;
    private ChatHistory chatHistory = new();
    
    private bool showToast = false;
    private string toastMessage = "";
    private bool isError = false;
    private System.Threading.Timer? toastTimer;
    
    private static readonly MarkdownPipeline pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .Build();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userId = await AuthStateService.GetUserIdAsync();
                if (!userId.HasValue)
                {
                    NavigationManager.NavigateTo("/login", true);
                    return;
                }

                var user = await AuthService.GetUserByIdAsync(userId.Value);
                if (user != null)
                {
                    username = user.Username;
                }

                chatHistory = await ChatHistoryService.LoadChatHistoryAsync(userId.Value);
                StateHasChanged();
                await ScrollToBottom();
            }
            catch
            {
                // Ignore JavaScript interop errors during prerendering
            }
        }
    }

    private string ConvertToHtml(string markdown)
    {
        if (string.IsNullOrEmpty(markdown)) return "";
        return Markdown.ToHtml(markdown, pipeline);
    }

    private void ShowToast(string message, bool error = false, int duration = 3000)
    {
        toastMessage = message;
        isError = error;
        showToast = true;
        StateHasChanged();

        toastTimer?.Dispose();
        toastTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                showToast = false;
                StateHasChanged();
            });
        }, null, duration, Timeout.Infinite);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userInput))
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput))
        {
            ShowToast("Please enter a message", true);
            return;
        }

        if (isStreaming)
        {
            ShowToast("Please wait for the AI to finish responding", true);
            return;
        }

        if (!userId.HasValue)
        {
            ShowToast("You must be logged in to send messages", true);
            return;
        }

        var userMessage = userInput;
        userInput = "";

        // Add user message immediately to chat history
        chatHistory.AddUserMessage(userMessage);
        StateHasChanged();
        await ScrollToBottom();

        // Start streaming AI response
        isStreaming = true;
        currentStreamingMessage = "";
        
        try
        {
            cts = new CancellationTokenSource();
            
            await foreach (var chunk in ChatService.GetStreamingChatResponseAsync(chatHistory).WithCancellation(cts.Token))
            {
                currentStreamingMessage += chunk;
                StateHasChanged();
                await ScrollToBottom();
            }

            // Add AI response to chat history
            chatHistory.AddAssistantMessage(currentStreamingMessage);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during AI response streaming");
            ShowToast("An error occurred while getting the AI response", true);
        }
        finally
        {
            isStreaming = false;
            currentStreamingMessage = "";
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            if (chatHistoryDiv.Context != null)
            {
                await JS.InvokeVoidAsync("scrollToBottom", chatHistoryDiv);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error scrolling to bottom");
        }
    }

    private async Task HandleLogout()
    {
        await AuthStateService.ClearAuthenticationAsync();
        NavigationManager.NavigateTo("/login", true);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
        }

        toastTimer?.Dispose();

        // Save chat history when component is disposed
        if (userId.HasValue)
        {
            try
            {
                await ChatHistoryService.SaveChatHistoryAsync(userId.Value, chatHistory);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error saving chat history during component disposal");
            }
        }
    }
} 