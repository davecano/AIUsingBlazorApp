@page "/chat"
@using AIForEverything.Components.Layout
@using AIForEverything.Services
@using Microsoft.JSInterop
@using Microsoft.SemanticKernel.ChatCompletion
@using Markdig
@using AIForEverything.Constants
@using Microsoft.SemanticKernel.Connectors.OpenAI
@inject IAIChatService ChatService
@inject IChatHistoryService ChatHistoryService
@inject ILogger<Chat> Logger
@inject IJSRuntime JS
@inject IAuthStateService AuthStateService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@rendermode InteractiveServer

<AuthLayout>
    <div class="chat-container">
        <div class="chat-sidebar @(isSidebarOpen ? "open" : "")">
            <div class="sidebar-header">
                <button class="new-chat-button" @onclick="CreateNewChat">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                    New Chat
                </button>
            </div>
            <div class="chat-list">
                @foreach (var chat in chatList.OrderByDescending(c => c.LastMessageTime))
                {
                    <div class="chat-item @(currentConversationId == chat.Id ? "active" : "")" 
                         @onclick="@(() => SwitchChat(chat.Id))">
                        <span class="chat-title">@chat.Title</span>
                        <button class="delete-chat" 
                                @onclick="@(() => DeleteChatAsync(chat.Id))" 
                                @onclick:stopPropagation>
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z" fill="currentColor"/>
                            </svg>
                        </button>
                    </div>
                }
            </div>
        </div>
        
        <div class="chat-main">
            <header class="chat-header">
                <button class="toggle-sidebar" @onclick="ToggleSidebar">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 12h18M3 6h18M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                </button>
                <div class="header-content">
                    <h1>AI 助手</h1>
                    <p class="subtitle">@ChatConstants.SystemPrompt</p>
                </div>
                <div class="user-profile">
                    <div class="user-info">
                        <span class="user-avatar">@(username?[0].ToString().ToUpper())</span>
                        <span class="username">@username</span>
                    </div>
                    <button class="settings-button" @onclick="ToggleSettings" title="AI 设置">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 15C13.6569 15 15 13.6569 15 12C15 10.3431 13.6569 9 12 9C10.3431 9 9 10.3431 9 12C9 13.6569 10.3431 15 12 15Z" fill="currentColor"/>
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M13.2 3.06V3.06C12.805 3.02 12.405 3 12 3C11.595 3 11.195 3.02 10.8 3.06L10.551 4.463C9.724 4.646 8.948 4.961 8.25 5.386L7.032 4.533C6.347 5.024 5.726 5.592 5.186 6.228L5.703 7.592C5.141 8.215 4.681 8.923 4.347 9.692L2.985 9.923C2.868 10.438 2.8 10.967 2.8 11.5C2.8 12.033 2.868 12.562 2.985 13.077L4.347 13.308C4.681 14.077 5.141 14.785 5.703 15.408L5.186 16.772C5.726 17.408 6.347 17.976 7.032 18.467L8.25 17.614C8.948 18.039 9.724 18.354 10.551 18.537L10.8 19.94C11.195 19.98 11.595 20 12 20C12.405 20 12.805 19.98 13.2 19.94L13.449 18.537C14.276 18.354 15.052 18.039 15.75 17.614L16.968 18.467C17.653 17.976 18.274 17.408 18.814 16.772L18.297 15.408C18.859 14.785 19.319 14.077 19.653 13.308L21.015 13.077C21.132 12.562 21.2 12.033 21.2 11.5C21.2 10.967 21.132 10.438 21.015 9.923L19.653 9.692C19.319 8.923 18.859 8.215 18.297 7.592L18.814 6.228C18.274 5.592 17.653 5.024 16.968 4.533L15.75 5.386C15.052 4.961 14.276 4.646 13.449 4.463L13.2 3.06Z" fill="currentColor"/>
                        </svg>
                    </button>
                    <button class="logout-button" @onclick="HandleLogout" title="退出登录">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M17 7L15.59 8.41L18.17 11H8V13H18.17L15.59 15.58L17 17L22 12L17 7Z" fill="currentColor"/>
                            <path d="M4 5H12V3H4C2.9 3 2 3.9 2 5V19C2 20.1 2.9 21 4 21H12V19H4V5Z" fill="currentColor"/>
                        </svg>
                    </button>
                </div>
            </header>
            
            @if (settings.ShowPanel)
            {
                <div class="settings-panel" @onclick:stopPropagation>
                    <div class="settings-content">
                        <h3>AI 设置</h3>
                        <div class="setting-item">
                            <label for="temperature">Temperature (@settings.Temperature)</label>
                            <input type="range" 
                                   id="temperature" 
                                   min="0" 
                                   max="2" 
                                   step="0.1" 
                                   @bind-value="settings.Temperature" />
                            <span class="setting-description">控制输出的随机性：较高的值会使输出更加随机多样，较低的值会使输出更加集中和确定。</span>
                        </div>
                        <div class="setting-item">
                            <label for="topP">Top P (@settings.TopP)</label>
                            <input type="range" 
                                   id="topP" 
                                   min="0" 
                                   max="1" 
                                   step="0.05" 
                                   @bind-value="settings.TopP" />
                            <span class="setting-description">控制词汇采样范围：例如 0.5 表示仅考虑概率加起来达到 50% 的词汇选项。</span>
                        </div>
                        <div class="setting-item">
                            <label for="maxTokens">Max Tokens (@settings.MaxTokens)</label>
                            <input type="range" 
                                   id="maxTokens" 
                                   min="100" 
                                   max="2048" 
                                   step="50" 
                                   @bind-value="settings.MaxTokens" />
                            <span class="setting-description">生成回复的最大标记数量（100-2048）。</span>
                        </div>
                        <div class="setting-item">
                            <label for="frequencyPenalty">Frequency Penalty (@settings.FrequencyPenalty)</label>
                            <input type="range" 
                                   id="frequencyPenalty" 
                                   min="0" 
                                   max="2" 
                                   step="0.1" 
                                   @bind-value="settings.FrequencyPenalty" />
                            <span class="setting-description">降低重复词句的出现频率：较高的值会减少特定词语重复出现的可能性。</span>
                        </div>
                        <div class="setting-item">
                            <label for="presencePenalty">Presence Penalty (@settings.PresencePenalty)</label>
                            <input type="range" 
                                   id="presencePenalty" 
                                   min="0" 
                                   max="2" 
                                   step="0.1" 
                                   @bind-value="settings.PresencePenalty" />
                            <span class="setting-description">鼓励谈论新话题：较高的值会增加模型谈论新话题的倾向。</span>
                        </div>
                    </div>
                </div>
            }

            <div class="chat-history" @ref="chatHistoryDiv">
                @if (chatHistory != null)
                {
                    @foreach (var message in chatHistory.Where(m => m.Role != AuthorRole.System))
                    {
                        <div class="message @(message.Role.ToString().ToLower()) @(!state.IsStreaming ? "completed" : "")">
                            @if (message.Role == AuthorRole.Assistant)
                            {
                                <div class="avatar">AI</div>
                            }
                            <div class="message-content">
                                <p>@((MarkupString)ConvertToHtml(message.Content))</p>
                            </div>
                            @if (message.Role == AuthorRole.User)
                            {
                                <div class="avatar">你</div>
                            }
                        </div>
                    }
                }
                @if (state.IsStreaming)
                {
                    <div class="message assistant">
                        <div class="avatar">AI</div>
                        <div class="message-content">
                            <p>@((MarkupString)ConvertToHtml(state.CurrentStreamingMessage))</p>
                        </div>
                    </div>
                }
            </div>

            <div class="chat-input-container">
                <div class="input-wrapper">
                    <input type="text" 
                           placeholder="请输入您的消息..." 
                           @bind="state.UserInput" 
                           @onkeyup="HandleKeyPress" />
                    <button type="button" class="send-button" @onclick="SendMessage">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M22 2L11 13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M22 2L15 22L11 13L2 9L22 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                    @if (toast.Show)
                    {
                        <div class="toast @(toast.IsError ? "error" : "info") @(toast.Show ? "show" : "")">
                            <div class="toast-content">
                                <span class="toast-icon">
                                    @if (toast.IsError)
                                    {
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
                                            <path d="M12 8V12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                            <circle cx="12" cy="16" r="1" fill="currentColor"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2"/>
                                            <path d="M12 16V16.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                            <path d="M12 8V12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                                        </svg>
                                    }
                                </span>
                                <span class="toast-message">@toast.Message</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</AuthLayout>

@code {
    // 合并相关的状态变量
    private record ChatState
    {
        public string UserInput { get; set; } = "";
        public string CurrentStreamingMessage { get; set; } = "";
        public bool IsStreaming { get; set; }
        public bool ChatHistoryChanged { get; set; }
    }

    private class ChatListItem
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public DateTime LastMessageTime { get; set; }
    }

    private ChatState state = new();
    private ElementReference chatHistoryDiv;
    private CancellationTokenSource? cts;
    private int? userId;
    private string? username;
    private ChatHistory chatHistory = new();
    private Guid currentConversationId;
    private List<ChatListItem> chatList = new();

    // 合并 Toast 相关状态
    private record ToastState
    {
        public bool Show { get; set; }
        public string Message { get; set; } = "";
        public bool IsError { get; set; }
        public System.Threading.Timer? Timer { get; set; }
    }

    private ToastState toast = new();

    // 合并 Settings 相关状态
    private record AISettings
    {
        public bool ShowPanel { get; set; }
        public float Temperature { get; set; } = 0.7f;
        public float TopP { get; set; } = 0.95f;
        public int MaxTokens { get; set; } = 1000;
        public float FrequencyPenalty { get; set; } = 0.5f;
        public float PresencePenalty { get; set; } = 0.5f;
    }

    private AISettings settings = new();
    private bool isSidebarOpen = true;

    private static readonly MarkdownPipeline pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .Build();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                userId = await AuthStateService.GetUserIdAsync();
                if (!userId.HasValue)
                {
                    NavigationManager.NavigateTo("/login", true);
                    return;
                }

                var user = await AuthService.GetUserByIdAsync(userId.Value);
                if (user != null)
                {
                    username = user.Username;
                }

                await LoadChatList();
                if (!currentConversationId.Equals(Guid.Empty))
                {
                    await LoadConversation(currentConversationId);
                }
                else if (chatList.Any())
                {
                    await SwitchChat(chatList[0].Id);
                }
                else
                {
                    await CreateNewChat();
                }
            }
            catch
            {
                // Ignore JavaScript interop errors during prerendering
            }
        }
    }

    private string ConvertToHtml(string markdown)
    {
        if (string.IsNullOrEmpty(markdown)) return "";
        return Markdown.ToHtml(markdown, pipeline);
    }

    private void ShowToast(string message, bool error = false, int duration = 3000)
    {
        toast.Message = message;
        toast.IsError = error;
        toast.Show = true;
        StateHasChanged();

        toast.Timer?.Dispose();
        toast.Timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                toast.Show = false;
                StateHasChanged();
            });
        }, null, duration, Timeout.Infinite);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(state.UserInput))
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(state.UserInput))
        {
            ShowToast("请输入消息", true);
            return;
        }

        if (state.IsStreaming)
        {
            ShowToast("请等待 AI 完成当前回复", true);
            return;
        }

        if (!userId.HasValue)
        {
            ShowToast("请先登录后再发送消息", true);
            return;
        }

        var userMessage = state.UserInput;
        state.UserInput = "";

        chatHistory.AddUserMessage(userMessage);
        state.ChatHistoryChanged = true;
        StateHasChanged();
        await ScrollToBottom();

        state.IsStreaming = true;
        state.CurrentStreamingMessage = "";
        
        try
        {
            cts = new CancellationTokenSource();

            var promptSettings = new OpenAIPromptExecutionSettings 
            { 
                Temperature = settings.Temperature,
                TopP = settings.TopP,
                MaxTokens = settings.MaxTokens,
                FrequencyPenalty = settings.FrequencyPenalty,
                PresencePenalty = settings.PresencePenalty
            };
            
            await foreach (var chunk in ChatService.GetStreamingChatResponseAsync(
                chatHistory, promptSettings).WithCancellation(cts.Token))
            {
                state.CurrentStreamingMessage += chunk;
                StateHasChanged();
                await ScrollToBottom();
            }

            chatHistory.AddAssistantMessage(state.CurrentStreamingMessage);
            state.ChatHistoryChanged = true;

            var chat = chatList.FirstOrDefault(c => c.Id == currentConversationId);
            if (chat?.Title == "New Chat")
            {
                await UpdateChatTitle(userMessage);
            }
            else 
            {
                await SaveCurrentChatAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during AI response streaming");
            ShowToast("AI 响应过程中出现错误", true);
        }
        finally
        {
            state.IsStreaming = false;
            state.CurrentStreamingMessage = "";
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            if (chatHistoryDiv.Context != null)
            {
                await JS.InvokeVoidAsync("scrollToBottom", chatHistoryDiv);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error scrolling to bottom");
        }
    }

    private async Task HandleLogout()
    {
        await AuthStateService.ClearAuthenticationAsync();
        NavigationManager.NavigateTo("/login", true);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        cts?.Cancel();
        cts?.Dispose();
        toast.Timer?.Dispose();

        if (userId.HasValue && currentConversationId != Guid.Empty && state.ChatHistoryChanged)
        {
            await SaveCurrentChatAsync();
        }
    }

    private async Task LoadChatList()
    {
        if (!userId.HasValue) return;
        
        var conversations = await ChatHistoryService.GetConversationsAsync(userId.Value);
        chatList = conversations.Select(c => new ChatListItem
        {
            Id = c.ConversationId,
            Title = c.Title,
            LastMessageTime = c.CreatedAt
        }).ToList();
    }

    private async Task CreateNewChat()
    {
        if (!userId.HasValue) return;

        // 不再保存当前会话，因为新建会话时还没有任何内容
        currentConversationId = Guid.NewGuid();
        chatHistory = new();
        chatHistory.AddSystemMessage(ChatConstants.SystemPrompt);
        state.ChatHistoryChanged = false; // 重置变更标记，因为系统消息不需要保存
        
        var newChat = new ChatListItem
        {
            Id = currentConversationId,
            Title = "New Chat",
            LastMessageTime = DateTime.UtcNow
        };
        
        chatList.Insert(0, newChat);
        StateHasChanged();
    }

    private async Task SwitchChat(Guid conversationId)
    {
        if (currentConversationId == conversationId) return; // 如果切换到同一个会话，直接返回
        
        // 只在有变化时保存当前会话
        if (state.ChatHistoryChanged && currentConversationId != Guid.Empty)
        {
            await SaveCurrentChatAsync();
        }

        currentConversationId = conversationId;
        await LoadConversation(conversationId);
        state.ChatHistoryChanged = false; // 重置变更标记
        StateHasChanged();
    }

    private async Task LoadConversation(Guid conversationId)
    {
        if (!userId.HasValue) return;
        
        try 
        {
            var loadedHistory = await ChatHistoryService.LoadChatHistoryAsync(userId.Value, conversationId);
            if (loadedHistory != null && loadedHistory.Count > 0)
            {
                chatHistory = loadedHistory;
            }
            else
            {
                // 如果没有历史记录，创建新的聊天历史
                chatHistory = new();
                chatHistory.AddSystemMessage(ChatConstants.SystemPrompt);
            }
            
            state.ChatHistoryChanged = false; // 重置变更标记，因为刚加载的内容不需要保存
            StateHasChanged();
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading chat history");
            ShowToast("加载聊天历史失败", true);
        }
    }

    private async Task DeleteChatAsync(Guid conversationId)
    {
        if (!userId.HasValue) return;

        // 从数据库删除会话
        await ChatHistoryService.DeleteConversationAsync(userId.Value, conversationId);
        
        // 从列表中移除会话
        chatList.RemoveAll(c => c.Id == conversationId);

        // 如果删除的是当前会话
        if (currentConversationId == conversationId)
        {
            // 清空当前会话
            chatHistory = new();
            
            if (chatList.Any())
            {
                // 切换到最新的会话
                var nextChat = chatList[0];
                currentConversationId = nextChat.Id;
                await LoadConversation(currentConversationId);
            }
            else
            {
                // 如果没有其他会话，创建新会话
                await CreateNewChat();
            }
        }

        StateHasChanged();
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private void ToggleSettings()
    {
        settings.ShowPanel = !settings.ShowPanel;
    }

    private async Task UpdateChatTitle(string firstMessage)
    {
        var title = firstMessage.Length > 30 
            ? firstMessage[..30] + "..." 
            : firstMessage;
            
        var chat = chatList.FirstOrDefault(c => c.Id == currentConversationId);
        if (chat != null && chat.Title != title)
        {
            chat.Title = title;
            // 只更新标题，不保存聊天历史
            await ChatHistoryService.UpdateConversationTitleAsync(userId!.Value, currentConversationId, title);
        }
    }

    private async Task SaveCurrentChatAsync()
    {
        if (!userId.HasValue || currentConversationId == Guid.Empty || !state.ChatHistoryChanged) return;

        try
        {
            // 更新会话的最后消息时间
            var chat = chatList.FirstOrDefault(c => c.Id == currentConversationId);
            if (chat != null)
            {
                chat.LastMessageTime = DateTime.UtcNow;
            }

            await ChatHistoryService.SaveChatHistoryAsync(userId.Value, currentConversationId, chatHistory);
            state.ChatHistoryChanged = false; // 保存成功后重置变更标记
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving current chat history");
        }
    }
} 