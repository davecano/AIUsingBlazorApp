@page "/register"
@using AIForEverything.Services
@inject IAuthService AuthService
@inject IAuthStateService AuthStateService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Register - AI For Everything</PageTitle>

<div class="login-container">
    <div class="login-box">
        <h2>Register</h2>
        <div class="form-group">
            <input type="text" class="form-control" placeholder="Username" @bind="username" />
        </div>
        <div class="form-group">
            <input type="password" class="form-control" placeholder="Password" @bind="password" />
        </div>
        <div class="form-group">
            <input type="password" class="form-control" placeholder="Confirm Password" @bind="confirmPassword" />
        </div>
        <button class="btn btn-primary" @onclick="HandleRegister">Register</button>
        <div class="register-link">
            Already have an account? <a href="/login">Login</a>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (await AuthStateService.IsAuthenticatedAsync())
                {
                    NavigationManager.NavigateTo("/chat");
                }
            }
            catch
            {
                // Ignore JavaScript interop errors during prerendering
            }
        }
    }

    private async Task HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Please enter both username and password";
            return;
        }

        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }

        var result = await AuthService.RegisterAsync(username, password);
        if (result.success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = result.message;
        }
    }
} 